/**
 * MJ CrÃ©ations - Data Layer (PRODUCTION)
 * Expose `window.MJ` pour les 4 interfaces (Auth, Firestore, Storage).
 */
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
import { getFirestore, collection, addDoc, query, where, orderBy, onSnapshot, serverTimestamp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";
import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-storage.js";

const app = initializeApp(window.MJ_FIREBASE_CONFIG);
const auth = getAuth(app), db = getFirestore(app), storage = getStorage(app);

window.MJ = {
  // Auth
  auth, onAuthStateChanged,
  login:(e,p)=>signInWithEmailAndPassword(auth,e,p),
  register:(e,p)=>createUserWithEmailAndPassword(auth,e,p),
  reset:(e)=>sendPasswordResetEmail(auth,e),
  logout:()=>signOut(auth),

  // Vitrine
  createProspect:(payload)=>addDoc(collection(db,'prospects'), {...payload, statut:'nouveau', createdAt:serverTimestamp()}),
  bookRdv:(dateISO, rdv)=>addDoc(collection(db,`planning/${dateISO}/rendezVous`), rdv),

  // Portail Client
  sendMessage:(clientId, msg)=>addDoc(collection(db,`clients/${clientId}/messages`), {...msg, ts:serverTimestamp()}),
  watchMessages:(clientId, cb)=>onSnapshot(query(collection(db,`clients/${clientId}/messages`), orderBy('ts','asc')), s=>cb(s.docs.map(d=>({id:d.id, ...d.data()})))),
  uploadDoc: async (clientId, file)=>{
    const r = ref(storage, `clients/${clientId}/docs/${Date.now()}-${file.name}`);
    await uploadBytes(r, file);
    const url = await getDownloadURL(r);
    await addDoc(collection(db,`clients/${clientId}/documents`), {name:file.name, url, ts:serverTimestamp()});
    return url;
  },
  watchDocs:(clientId, cb)=>onSnapshot(query(collection(db,`clients/${clientId}/documents`), orderBy('ts','desc')), s=>cb(s.docs.map(d=>({id:d.id,...d.data()})))),

  watchChantiersByClient:(clientId, cb)=>onSnapshot(query(collection(db,'chantiers'), where('clientId','==',clientId)), s=>cb(s.docs.map(d=>({id:d.id,...d.data()})))),
  createFacture:(clientId, f)=>addDoc(collection(db,`clients/${clientId}/factures`), {...f, createdAt:serverTimestamp(), status:'envoyee'}),
  watchFactures:(clientId, cb)=>onSnapshot(query(collection(db,`clients/${clientId}/factures`), orderBy('createdAt','desc')), s=>cb(s.docs.map(d=>({id:d.id,...d.data()})))),

  // Admin
  watchRdvJour:(iso, cb)=>onSnapshot(query(collection(db,`planning/${iso}/rendezVous`), orderBy('heure','asc')), s=>cb(s.docs.map(d=>({id:d.id,...d.data()})))),

  // ComptabilitÃ©
  watchJournal:(exo, cb)=>onSnapshot(query(collection(db,`comptabilite/${exo}/journal`), orderBy('date','desc')), s=>cb(s.docs.map(d=>({id:d.id,...d.data()})))),
  watchFacturesFlat:(cb)=>onSnapshot(query(collection(db,'facturesFlat'), orderBy('createdAt','desc')), s=>cb(s.docs.map(d=>({id:d.id,...d.data()}))))
};
